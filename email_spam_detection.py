# -*- coding: utf-8 -*-
"""Email Spam Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RpzqBWj_GIMqkWzsGhDD7pevbkXFGs6u

Import Lib
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#Train and Test Spliting
from sklearn.model_selection import train_test_split

#Models
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn import tree, svm
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import MultinomialNB

#Cross Validation
from sklearn.model_selection import cross_val_score, KFold
from sklearn.svm import SVC
from sklearn.datasets import load_iris

#Score
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report,ConfusionMatrixDisplay

# %matplotlib inline

"""Import Data"""

data = pd.read_csv("/content/spam_ham_dataset.csv")

"""Basic Analysis"""

data.head()

data.tail()

data.info()

data.describe()

sum(data.duplicated())

sum(data.duplicated()) == 0

data.drop_duplicates(inplace=True)

print (data.isnull().sum())

data.dropna(inplace=True)

print (data.isnull().sum())

data.head(20)

data[data["label_num"] == 1]

data.drop("label" , axis=1 , inplace =True)

data.info()

data.head()

data["size text"] = data['text'].str.len()
data[data["label_num"]==0]

data.groupby(["label_num"]).min()

data.groupby(["label_num"]).max()

data[data["text"].duplicated()]

data.drop("size text" , axis =1 , inplace =True)

data.info()

"""Train Test Split"""

X = data["text"]
Y = data["label_num"]
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

"""Feature Extraction"""

featureExtraction = TfidfVectorizer(min_df= 1, stop_words= 'english', lowercase=True)

X_train_features = featureExtraction.fit_transform(X_train)
X_test_features = featureExtraction.transform(X_test)

"""Models"""

models = [
    ('LogisticRegression', LogisticRegression()),
    ('DecisionTreeClassifier', tree.DecisionTreeClassifier()),
    ('SVC', svm.SVC(kernel='linear')),
    ('KNeighborsClassifier', KNeighborsClassifier(n_neighbors=5)),
    ('RandomForestClassifier', RandomForestClassifier(n_estimators=100, random_state=42)),
    ('MultinomialNB', MultinomialNB())
]

"""Classification Report and Confusion Matrix"""

for name, model in models:
    model.fit(X_train_features, y_train)
    y_pred = model.predict(X_test_features)
    print('-----------------------------------------------------')
    print(f"{name} Classification Report:\n")
    print(classification_report(y_test, y_pred))
    #print(f"{name} Confusion Matrix:\n")
    #print(confusion_matrix(y_test, y_pred))
    ConfusionMatrixDisplay(confusion_matrix(y_test,y_pred)).plot()
    plt.title("Confusion Matrix for Logistic Regression Classifer")

"""K Folds Cross Validation"""

kf = KFold(n_splits=5)

for name, model in models:
    pipe = Pipeline([
        ('feature_extraction', TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)),
        ('model', model)
    ])
    scores = cross_val_score(pipe, X, Y, cv=kf)
    accuracy = np.mean(scores)
    print(f"{name} Accuracy: {accuracy*100:.2f}%")

"""Prediction Using User Input"""

x = input("Enter an email: ")

x_input = [x]
x_features = featureExtraction.transform(x_input)

for name,model in models:
    y_pred = model.predict(x_features)

    if (y_pred == 0):
        print(f'{name} Predict : ham')
    else:
        print(f'{name} Predict : spam')